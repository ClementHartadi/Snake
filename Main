

    public void run() {
        // TODO Auto-generated method stub
        Timer tick = new Timer();
        TimerTask task = new TimerTask() {
            @Override
            public void run() {
                // TODO Auto-generated method stub
                for (int i=0 ; i<snakearray.size(); i++) {
                    snakearray.get(i).move();
                    int x = snakearray.get(i).getx();
                    int y = snakearray.get(i).gety();
                    gui.lblSnakeArray.get(i).setLocation(x, y);

                    //Checks for a collision
                    if(i == 0){

                        ArrayList<Integer> foodLocation = new ArrayList<>();

                        foodLocation = gui.getFoodLocation();

                        //checks for food collision and spawns a new snake
                        if(x == foodLocation.get(0) && y == foodLocation.get(1) ){
                        	String dir=snakearray.get(snakearray.size()-1).getdirection1();
                        	int x1 = snakearray.get(snakearray.size()-1).getx();
                        	int y1 = snakearray.get(snakearray.size()-1).gety();
                            gui.positionFood();
                            if (dir == "north") { // spawns a new snake unit south of the last snake
                            	Main.this.addsnake(x1, y1+25,snakearray.get(snakearray.size()-1));
                            	gui.addnewSnake(x1, y1+25);
                            }else if (dir == "south") {// spawns it north
                            	Main.this.addsnake(x1, y1-25,snakearray.get(snakearray.size()-1));
                            	gui.addnewSnake(x1, y1-25);
                            }else if (dir == "west") {// spawns it south
                            	Main.this.addsnake(x1+25, y1,snakearray.get(snakearray.size()-1));
                            	gui.addnewSnake(x1+25, y1);
                            }else { //spawns it west
                            	Main.this.addsnake(x1-25, y1,snakearray.get(snakearray.size()-1));
                            	gui.addnewSnake(x1-25, y1);
                            }
                        }
                        //checks for wall collision
                        if(x == 800 || y == 800|| x ==  0|| y == 0){
                            gui.popupmessage("You can not run through walls");
                            System.exit(0);
                        }


                    }

                }
                for (int i = 0 ; i<snakearray.size();i++){
                    snakearray.get(i).updatedirection2();
                }
            }
        };

        tick.scheduleAtFixedRate(task, 100, 100);
    }

    public void addsnake(int x, int y, Snake arg) {
        Snake unit = new Snake(x,y,arg);
        snakearray.add(unit);
    }


    /**
	 * Adjusts direction of snake to player demands
	 */
	class SnakeListener implements KeyListener{
		public void keyTyped(KeyEvent e) {
		}
		@Override
		public void keyPressed(KeyEvent e) {


			if(e.getKeyCode() == KeyEvent.VK_UP)
			{
				if(Direction != "south") {
					Direction = "north";
					snakearray.get(0).setdirection1(Direction);
				}

			}
			else if(e.getKeyCode() == KeyEvent.VK_DOWN)
			{
				if(Direction != "north") {
					Direction = "south";
					snakearray.get(0).setdirection1(Direction);
				}
			}
			else if(e.getKeyCode() == KeyEvent.VK_LEFT)
			{
				if(Direction != "east") {
					Direction = "west";
					snakearray.get(0).setdirection1(Direction);
				}
			}
			else{
				if(Direction != "west") {
					Direction = "east";
					snakearray.get(0).setdirection1(Direction);
				}
			}

		}
		@Override
		public void keyReleased(KeyEvent arg0) {
			// TODO Auto-generated method stub
		}
	}
